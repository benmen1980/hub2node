
module.exports.ColumnType = {
    Bool: 'bool',
    Number: 'number',
    Date: 'date',
    Time: 'time',
    Text: 'text',
    Duration: 'duration'
}

module.exports.ColumnZoomType = {
    Search: 'Search',
    RelSearch: 'RelSearch',
    Choose: 'Choose',
    Attach: 'Attach',
    URL: 'URL',
    EMail: 'EMail',
    None: 'None',
    // procedures only
    SpecialAttach: 'SpecialAttach',
    Zoom: 'Zoom',
    HiddenZoom: 'HiddenZoom',
    LinkFile: 'LinkFile',
    QEdit: 'QEdit',
    // unused
    Date14: 'Date14',
    Date8: 'Date8',
    Date10: 'Date10'
}

module.exports.ColumnCode = {
    None: 'None',
    Bool: 'Bool',
    Int: 'Int',
    Real: 'Real',
    Date8: 'Date8',
    Date10: 'Date10',
    Date14: 'Date14',
    Time5: 'Time5',
    Time6: 'Time6',
    Rstr: 'Rstr',
    Str: 'Str',
    Char:'Char',
    Day: 'Day',
    Unasigned: 'Unasigned',
    Operator: 'Operator'
}

module.exports.ProcMessageType = {
    Information : 'information',
    Warning : 'warning',
    Error : 'error'
}

module.exports.SearchAction = {
    Start: 0,
    /** Retrieve more search results. */
    Next: 1,
    /** Retrieves the previous search results. Usually, this action is unnecessary, as previously retrieved results are cached locally. */
    Prev: 2,
    /** Change the ‘search-by’ method. Available methods are: By Name, By Number, By Foreign Name. */
    TypeChange: 3,
    /** Changes the search query text. */
    TextChange: 4,
    /** Specifies that the search should look for results that start with the query text. */
    StartChange: 5,
    /** When running a search in English (or other languages with uppercase and lowercase), toggles the ‘ignoreCase’ flag on or off. */
    IgnoreCaseChanged: 6
}

module.exports.ServerResponseType = {
    /** Indicating there was an error message from Priority. */
    Error: "error",
    /** Indicating there was a warning message from Priority. */
    Warning: "warning",
    /** Indicating there was an information message from Priority. */
    Information: "information",
    /** Indicating there was a fatal error somewhere. Could be a syntax error,API error,exception and so on. */
    APIError: "apiError"
}

module.exports.ProcStepType = {
    /** A procedure step that includes input fields.*/
    InputFields: "inputFields",
    /** A procedure step that includes choose/search fields. */
    InputOptions: "inputOptions",
    /** A procedure step that shows a help dialog. */
    InputHelp: "inputHelp",
    /** A procedure step for when the procedure sends a message. */
    Message: "message",
        /** A procedure step that includes upload file. */
    Upload: "upload",
    /** A procedure step for handling a new report options. */
    ReportOptions: "reportOptions",
    /** A procedure step for handling a new document options. */
    DocumentOptions: "documentOptions",
    /** A procedure step for handling a report display as a html file. */
    DisplayUrl: "displayUrl",
    /** Indicates the procedure has finished. */
    End: "end",
    Client: "client"
}

module.exports.ServerResponseCode = {
    /** There was an attempt to add text in a no-text form. */
    NoHtml: "noHtml",
    /** There was an attempt to save text in a read-only form. */
    ReadOnlyForm: "readOnlyForm",
    /** There was an attempt to save a text that was too long. */
    TextTooLong: "textTooLong",
    /** There was an attempt to perform an action in some forms row before saving/discarding changed in the current row. */
    MustSaveOrDiscard: "mustSaveOrDiscard",
    /** There was an API exception */
    Exception: "exception",
    /** There was an attempt to call 'clearRows' on a subform. */
    NoClearOnSubForm: "noClearOnSubForm",
    /** The file sent to the upload function was null. */
    FileIsNull: "fileIsNull",
    /** There was an attempt to perform an action on  a not-existing subform. */
    NoSuchSubForm: "noSuchSubForm",
    /** There was an attempt to perform an action on  a not-existing column. */
    NoSuchColumn: "noSuchColumn",
    /** The previous API request was deleted from the request-queue, meaning it was rejected. */
    FailedPreviousRequest: "failedPreviousRequest",
    /** The user canceled a warning message that came from Priority. */
    WarningCancel: "warningCancel",
    /** Login failed. */
    LoginFailed: "loginFailed",
    /** The filter for rows retrieval is wrong. */
    InvalidFilter: "invalidFilter",
    /** Text forms - the text is already being edited somewhere else. */
    ReadWrite: "readWrite",
    /** The current API request was stopped.  */
    Stop: "stop",
    /** Message code */
    Information: "information",
    /** Code for calling a function that is not supported in the Priority version  */
    NotSupport: "notSupportedInThisPriorityVersion",
    /**  Code for logging in with an expired password   */
    LoginExpired: "loginExpired"
}


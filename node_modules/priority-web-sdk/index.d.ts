//////////////// GENERAL ///////////////////

export type BooleanNumber = 1 | 0;

export type ErrorCallback = (
	serverResponse: ServerResponse
) => void
export type SuccessCallback = (
	result: {}
) => void

export type LoginSuccessCallback = (
	loginFunctions: LoginFunctions
) => void

/**
 * Use this function to initialize the system and login. A successful login also returns the LoginFunctions object.
 * @param  {Configuration} configuration - Environment configuration object.
 * @param  {LoginSuccessCallback} onSuccess - Called on success.
 * @param  {ErrorCallback} onError - Called on error.
 */
export function login(configuration: Configuration, onSuccess?: LoginSuccessCallback, onError?: ErrorCallback) : Promise<LoginFunctions>

/**
 * Use this function to update priorty on a new access token
 * @param accessToken - The new access token
 */
export function updateAccessToken(accessToken:string)


/**
 * Use this function  to change the Priority password.
 * @param  {string} newPwd - New password.
 * @param  {string} confirmNewPwd - confirmation password.
 * @param  {string} oldPwd - the old passowrd.
 * @param  {SuccessCallback} onSuccess - Called on error.
 * @param  {ErrorCallback} onError - Called on error.
 */
export function changePassword(newPwd:string, confirmNewPwd:string, oldPwd:string ,onSuccess?:SuccessCallback, onError?:ErrorCallback)
/**
 * 
 * @param gpsLocation {string} - new location:
 *                                 ":" + latitude + ":" + longitude + ":" + address
                                or ":" + latitude + ":" + longitude
 * @param onSuccess {} will always return an empty object
 * @param onError {} will awlays return an empty object
 */
export function setGPSLocation(gpsLocation: string, onSuccess?: SuccessCallback, onError?: ErrorCallback) : Promise<any>


/**
 * A callback passed to the formStart function. Use it to display messages received from the server.
 * This callback is called by the SDK whenever messages are received from the server after calling a Form Object method.
 */
export type MessagesCallback = (
	serverResponse: ServerResponse
) => void
 
export type RowMetadata={
    color:string
    }

export type FormRows = {
	[formName: string] : {
		[rowIndex: string] : {
            [fieldName:string] :string | RowMetadata
		}
	}
}

/**
 * A callback function passed to the formStart function.
 * This callback is called by the SDK when updates to a Form’s row or field are received from the server.
 * Updates can be received after performing certain actions, including:
 * -fieldUpdate
 * -saveRow
 * -undo
 * -delRow
 * Methods that include updates will be noted as such, and will call this function.
 * Note: This callback should be carefully implemented to cover all ‘update’ cases, in order to ensure local data is always synchronized with data on the server.
 * TODO: rename in documentation
 */
export type UpdateFieldsCallback = (
	updateFormRows: FormRows
) => void

export type FormStartSuccessCallback = (
	form: Form
) => void

/**
 * Opens a Form. Call this method once for each Form you want to open.
 * A Form will stay open until you end it. Once open, you can use all of its methods.
 * @param  {string} formName - The internal (uppercase) name of the form, e.g. ‘ORDERS’.
 * @param  {MessagesCallback} onShowMessgeFunc - Callback function for handling error and warning messages.
 * @param  {UpdateFieldsCallback} onUpdateFieldsFunc - Callback function for handling form field updates.
 * @param  {ProfileConfig | string} profile - Object containing the company and user group in which to open the form.
 * @param  {BooleanNumber} autoRetrieveFirstRows - 1 or 0. Use 1 to open the form and retrieve records (rows) according to the default query. Use 0 to open the form, but do not run a query.
 * @param  {FormStartSuccessCallback} onSuccess - Called on success.
 * @param  {ErrorCallback} onError - Called on error.
 */
export function formStart(formName: string,
	onShowMessgeFunc: MessagesCallback,
	onUpdateFieldsFunc: UpdateFieldsCallback,
	profile: ProfileConfig | string,
	autoRetrieveFirstRows: BooleanNumber,
	onSuccess?: FormStartSuccessCallback,
	onError?: ErrorCallback): Promise<Form>

/**
 * Contains additional parameters used by the formStartEx function.
 */
export interface ExParams {
	zoomValue: string,
	hiddenFields: string[]
}

/**
 * Opens a Form in a special mode that can call on additional parameters.
 * @param  {string} formName - The internal (uppercase) name of the form, e.g. ‘ORDERS’.
 * @param  {MessagesCallback} onShowMessgeFunc - Callback function for handling error and warning messages.
 * @param  {UpdateFieldsCallback} onUpdateFieldsFunc - Callback function for handling form field updates.
 * @param  {ProfileConfig | string} profile - Object containing the company and user group in which to open the form.
 * @param  {BooleanNumber} autoRetrieveFirstRows - 1 or 0. Use 1 to open the form and retrieve records (rows) according to the default query. Use 0 to open the form, but do not run a query.
 * @param  {ExParams} exParams - Contains additional parameters used by the formStartEx function.
 * @param  {FormStartSuccessCallback} onSuccess - Called on success.
 * @param  {ErrorCallback} onError - Called on error.
 */
export function formStartEx(formName: string,
	onShowMessgeFunc: MessagesCallback,
	onUpdateFieldsFunc: UpdateFieldsCallback,
	profile: ProfileConfig | string,
	autoRetrieveFirstRows: BooleanNumber,
	exParams: ExParams,
	onSuccess?: FormStartSuccessCallback,
	onError?: ErrorCallback): Promise<Form>


//////////////// COLUMN ///////////////////

export enum ColumnType {
    Bool = 'bool',
    Number = 'number',
    Date = 'date',
    Time = 'time',
    Text = 'text',
    Duration = 'duration'
    
}

export enum ColumnZoomType {
    Search = 'Search',
    RelSearch = 'RelSearch',
    Choose = 'Choose',
    Attach = 'Attach',
    URL = 'URL',
    EMail = 'EMail',
    None = 'None',
    // procedures only
    SpecialAttach = 'SpecialAttach',
    Zoom = 'Zoom',
    HiddenZoom = 'HiddenZoom',
    LinkFile = 'LinkFile',
    QEdit = 'QEdit',
    // unused
    Date14 = 'Date14',
    Date8 = 'Date8',
    Date10 = 'Date10'
}

export enum ColumnCode {
    None = 'None',
    Bool = 'Bool',
    Int = 'Int',
    Real = 'Real',
    Date8 = 'Date8',
    Date10 = 'Date10',
    Date14 = 'Date14',
    Time5 = 'Time5',
    Time6 = 'Time6',
    Rstr = 'Rstr',
    Str = 'Str',
    Char ='Char',
    Day = 'Day',
    Unasigned = 'Unasigned',
    Operator = 'Operator'
}

export interface Column {
    /** Field’s code (database type) */
    code: ColumnCode;
    /** Indicates whether files can be attached in this field. 0 or 1. */
    attachment: BooleanNumber;
    /** For decimal fields, the decimal precision. */
    decimal: number;
    /** In date fields, the field’s format, e.g. ‘DD/MM/YY’. */
    format: string;
    /** Indicates whether the field is mandatory. 0 or 1. */
    mandatory: BooleanNumber;
    /** Maximum number of characters in the field. Used for text and number fields. */
    maxLength: number;
    /** Indicates whether the field is read-only. 0 or 1. */
    readonly: BooleanNumber;
    /** Field’s title that should be displayed to the user. */
    title: string;
    /** Field’s type, one of ColumnType enum */
    type: ColumnType;
    /** Fields zoom type. Used for indicating if and what type of "zoom" can be made into the field. One of ColumnZoomType enum. */
    zoom: ColumnZoomType;
    /** Intecates whether the field is a status field. */
    isstatus: BooleanNumber;
    /** Indicates whether column is multi company*/
    multienv: BooleanNumber;
    /** Target zoom form */
    zoomfname: string;
    /** Related column name */
    relcol: string;
    /** Indicates whether the column is a key */
    iskey: BooleanNumber;
    /** Column id */
    field: number;
}

//////////////// COMPANY ///////////////////

export interface EnvProfile {
  /** Profile name */
  profilename: string,
  /** profile code */
  profile: number
}

export interface Company {
  /** Company internal name */
  dname: string;
  /** Company external name */
  prettyname?: string;
  /** Full Company Name */
  title: string;
  /** Array color for company (use only the first organ) */
  color: any[];
  /**  Array system Profiles  */
  EnvProfile?: EnvProfile[];
  
}

//////////////// CONFIGURATION ///////////////////

export interface ProfileConfig {
	/** The internal name of a company in Priority. You can find the internal name in the Companies form within Priority. */
	company: string;
	/** login profile number */
	group?: number;
}

export interface Configuration {
    /** URL to the Priority WCF service without the “wcf/wcf/service.svc” part (i.e. the URL configured for the Priority Application Server). */
    url: string;
    /** tabula.ini file name */
    tabulaini: string;
    /** Language code. This determines the language of messages provided by the server, e.g. 3 - American English. */
    language: number;
    /** The internal name of the company in Priority to log into. */
    profile: ProfileConfig;
    /** Application Name - (When developing for Priority, can be accessed in form triggers using form variable :FORM_APP_NAME) */
    appname: string;
    /** login username value */
    username?: string;
    /** login password value */
    password?: string;
    /** Name of the device (additional information that is logged in the connection log). May be an empty string. */
    devicename: string;
    /** Applaction Id */
    appid: string;
    /** Application key */
    appkey: string;
    /** OID acsses token */
    accessToken?:string;
}

//////////////// FILE ///////////////////

export interface FileResult {
	/** The file's uri in the priority server. */
	file: string;
}

export interface FileProgress {
	/** A number between 0 and 100 indicating the progress of the upload. */
	progress: number;
}

export type FileUploadSuccessCallback = (
	result: FileResult
	) => void

export type FileUploadProgressCallback = (
	result: FileProgress
	) => void

//////////////// FILTER ///////////////////

export interface QueryValue {
    /** The field to filter by */
    field: string;
    /** Indicates the from value to filter */
    fromval: string | string[];
    /** Indicates the to/until value to filte */
    toval?: string;
    /** Filter operator. May be one of: =, <>, >=, <=, >, < */
    op?: string;
    /** Define if should sort rows by this query. could be 0 or 1 */
    sort?: BooleanNumber;
    /** Define sort rows by desc. could be 0 or 1 */
    isdesc?: BooleanNumber;
}

export interface Filter {
    /** Define if operator between query values is OR. for OR should be 1, for AND should be 0 */
    or: BooleanNumber;
    /** Define if filter should ignore case. could be 0 or 1 */
    ignorecase: BooleanNumber;
    /** 
     * Array of query values to filter,
     * Each query value defines the field to filter, operator, values and more
     * When using OR operator should not pass 4 query values.
     */
    QueryValues: QueryValue[];
}

export interface QueryFilter extends Filter {
    /** unique query number for the saved search  */
    query: number;

    /**search name */
    queryname: string;
    
    /** is the search is saved or not(last searches) could be 1 OR 0 */
    saved: BooleanNumber;

    /** is this search the default search to run when opening form */
    isdefault: BooleanNumber;
}

export type getFiltersSuccessCallback = (
    queryFilters: QueryFilter[]
) => void

//////////////// FORM ///////////////////

/** An object in a form's subforms array */
export interface Subform
{
    title: string,
    text: BooleanNumber
}

/** The row index according to the operation.*/
export interface RowIndex
{
	rowindex: number
}

/** 1: alive, 0: not alive. */
export type isAliveSuccessCallback = (
	isAlive: BooleanNumber
) => void

/** Form rows retrieved according to the default query or filter.*/
export type GetRowsSuccessCallback = (
	rows: FormRows
) => void

export type RowCallback = (
	rowIndexObj: RowIndex
) => void

/** File url. */
export type GetFileSuccessCallback = (
	result: string
)=>void

export interface Status {
    statdes: string,
    color: string
}

export interface HtmlSignature {
    html: string,
    top: number
}
export interface Form
{
	/** The form’s uniqe uppercase ‘Priority’ name */
	name: string;
	/** An object containing all of a form’s columns. */
	columns: { [key: string]: Column };
	/** Indicates whether the form is a html text form. 0 or 1. */
	ishtml: BooleanNumber;
	/** If the form is a text form, indicates if the form can be edited (based on the user’s permissions). 0 or 1. */
	ishtmleditable: BooleanNumber;
	/** Indicates whether the form is a query form i.e. read-only. 0 or 1. */
	isquery: number;
	/** Indicates whether the form can only contain a single row. 0 or 1. */
	oneline: BooleanNumber;
    /** An array containing all of a form’s statuses. */
    statuses: Status[];
	/** The form’s title. */
	title: string;
	/** A list of the form’s subforms. Key: the subform’s name, Value: a Subform */
	subForms: { [key: string]: Subform }
	/** The form's max rows number returned from 'getRows' */
	windowSize: number;
    /** the server session ID */
    session:string;
    /** the default queryFilter for the form */
    queryFilters: Omit<QueryFilter, "QueryValues"> & {queryValues: QueryValue[]};

    chooseModes: ChooseModes;
    /** Id of the column used for zooming to the current form */
    zoomfield: number;

	/**
    Confirms a server warning message. Every operation can trigger a warning messages on the server.

    This method is used to make the server aware of the last operation’s state:

    If the the user approves the action despite the warning message, specify 1 in the ‘okCancel’ parameter. When the server completes the operation, it will call the ‘onSuccess’ or ‘onFulfill’ function of the last server call.
    If the the user cancels the action following the warning message, specify 0 in the ‘okCancel’ parameter. When the server completes the operation it will call the ‘onError’ or ‘onReject’ function of the last server call.
	* @param {BooleanNumber} okCancel - 1: ok, 0: cancel.
	* @memberof Form
    */
	warningConfirm(okCancel:BooleanNumber):void
	/**
	 * Confirms a server information message. Every operation can trigger informational messages from the server. Call this method when the user confirms they have read the message.
	 * @memberof Form
	 */
	infoMsgConfirm():void
	/**
	 * Checks whether a form is alive on the server. Attempting to call methods for a dead form will cause errors.
	 * @param {isAliveSuccessCallback} [onSuccess] 
	 * @param {ErrorCallback} [onError]
	 * @returns {Promise<BooleanNumber>}
	 * @memberof Form 
	 */
	isAlive(onSuccess?: isAliveSuccessCallback, onError?: ErrorCallback): Promise<BooleanNumber>
	/**
	 * Starts a Sub-Form and sets the active row to be the first row of the Sub-Form.
	 * @param {string} formName - form's name for example: ORDERITEMS.
	 * @param {MessagesCallback} onShowMessgeFunc - Callback function for handling error and warning messages (if null, uses the parent form callback).
	 * @param {UpdateFieldsCallback} onUpdateFieldsFunc - Callback function for handling field updates (if null, uses the parent form callback).
	 * @param {FormStartSuccessCallback} [onSuccess] 
	 * @param {ErrorCallback} [onError] 
	 * @returns {Promise<Form>}
	 * @memberof Form
	 */
	startSubForm(formName: string, onShowMessgeFunc: MessagesCallback, onUpdateFieldsFunc: UpdateFieldsCallback, onSuccess?: FormStartSuccessCallback, onError?: ErrorCallback): Promise<Form>
	/**
    * Exits the current form. If the form is a Subform, returns to the active row originally set in the parent form. 
    * @param {SuccessCallback} [onSuccess] - called on success.
    * @param {ErrorCallback} [onError] - called on error.
	* @returns {Promise<any>}
	* @memberof Form
    */
	endCurrentForm(onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
	 * Sets a search filter in a form or sub-level form. The filter is used to retrieve rows according to a certain query. See getRows. 
	 * In order to clear the filter call clearSearchFilter.

     * Note: As long as you do not clear or change the filter, it will remain in effect. 
     * Every call to getRows will return rows according to that filter.
	 
	 * @param {Filter} filter - the filter is an Object of the form:
   * {
   * 	or: (BooleanNumber),
   * 	QueryValues:
   * 	[{
   * 		field: (string),
   * 		fromval: (string),
   * 		toval:	(string),
   * 		op:	(string),
   * 		sort: (BooleanNumber),
   * 		isdesc: (BooleanNumber),
   * 	},
   * 	{
   * 		...
   * 	}]
   * }
   * 	
   * or: 0: and, 1: or (operator to be used between ALL conditions).
   * field: field name (for example: CUSTNAME)
   * fromval: value
   * toval: to value - if tovalue is not empty then condition is always: field >= fromval AND field <= toval,
   * 					 if tovalue is empty, then condition is: field op fromval.
   * op: one of "=", "<", "<=", ">", ">=", "<>"
   * sort: 0: no sort, 1: sort
   * isdesc: 0: ASC, 1: DESC
   *  
     Notes

     You can only query a field once per filter.
     Search is performed from the beginning of valid field values. For example, when querying a number-only field with a value such as “100”, the “” in the beginning will be ignored.
     The filter object must contain all of its members. For example if you don’t use toval send an empty string but don’t send the filter without toval. 
	 * @param {SuccessCallback} [onSuccess] 
	 * @param {ErrorCallback} [onError] 
	 * @returns {Promise<any>}
	 * @memberof Form
	 */
	setSearchFilter(filter: Filter, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
   * Clears the search filter. After clearing the filter, the getRows method will use the default query for the form when retrieving rows.
   * 
   * @param {SuccessCallback} [onSuccess] 
   * @param {ErrorCallback} [onError] 
   * @returns {Promise<any>}
   * @memberof Form
   */
	clearSearchFilter(onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
	 * Returns rows data for the current form.
	 * 
	 * Note: If the current form was started with the parameter autoRetrieveFirstRows=1, the first time you call this function the API will not go to the server but instead return rows that were already retrieved and stored locally.
	 * 
	 * If a default query has been defined for the form, or a Filter is set, the returned rows will be according to the query or the filter.
	 * 
	 * The rows are returned in the following way:
	 * 
	 *  Rows : Object
        {   
         "FORM_NAME" :   
         {      
            "row_index" :       
            {          
                "FIELD_NAME" : value,          
                "ANOTHER_FIELD_NAME" : value
                ...        
            },       
            "another_row_index": 
            {
              ...
            }
          } 
        } 

	 * @param {number} fromRow - The position of the first row to be retrieved.
	 * @param {GetRowsSuccessCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<FormRows>}
	 * @memberof Form
	 */
	getRows(fromRow: number, onSuccess?: GetRowsSuccessCallback, onError?: ErrorCallback): Promise<FormRows>
	/**
   * Clears all rows of a parent form. This does not delete rows, but rather makes them inaccessible until retrieved again.
   * @param {SuccessCallback} [onSuccess] - called on success.
   * @param {ErrorCallback} [onError] - called on error.
   * @returns {Promise<any>}
   * @memberof Form
   */
	clearRows(onSuccess?: SuccessCallback, onError?): Promise<any>
	/**
   * Opens a new row in the current form. Set the position of the active row to this row.
   * @param {RowCallback} [onSuccess] - called on success.
   * @param {ErrorCallback} [onError] - called on error.
   * @returns {Promise<RowIndex>}
   * @memberof Form
   */
	newRow(onSuccess?: RowCallback, onError?: ErrorCallback): Promise<RowIndex>
	/**
	 * Sets the active row to the specified row. Note that the row number index starts at 1.
	 * 
	 * Note: To perform actions on a row, you must first set it as the active row.
	 * @param {number} row - Row number.
	 * @param {RowCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<RowIndex>}
	 * @memberof Form
	 */
	setActiveRow(row: number, onSuccess?: RowCallback, onError?: ErrorCallback): Promise<RowIndex>
	/**
	 * Changes or adds a value in a field in the currently active row. The updated information is returned through UpdateFormCallback. After changing the value in the field, Priority triggers may be executed, updating additional fields. 
	 * 
	 * These changes are also returned via UpdateFormCallback Calling this action does not save the new value.
	 * @param {string} fieldName - Name of the field. All uppercase.
	 * @param {string} fieldValue - The new value of the field.
	 * @param {SuccessCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<any>}
	 * @memberof Form
	 */
	fieldUpdate(fieldName: string, fieldValue: string, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
	 * Saves all changes made to the currently active row. Updated data is returned via UpdateFormCallback.
	 * @param {BooleanNumber} backToParentForm - 0: Stay in the current row after saving 1: Applicable only when saving a row in a Sub-Form. Go back to parent form, and set the parent row as the active row.
	 * @param {SuccessCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<any>}
	 * @memberof Form
	 */
	saveRow(backToParentForm: BooleanNumber, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
	 * Adds new text to a html text form.
	 * @param {string} text - The new text to add. May be formatted as plain text or html).
	 * @param {BooleanNumber} addFlag - Append new text to existing text (1). Replace existing text with new text (0).
	 * @param {BooleanNumber} signatureFlag - Add a user signature (1). Don’t add a signature (0).
	 * @param {BooleanNumber} secondaryLangFlag - Determines the language of the signature: using the primary system language (0), or English (1). Useful when the primary language is not English.
	 * @param {SuccessCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<any>}
	 * @memberof Form
	 */
	saveText(text: string, addFlag: BooleanNumber, signatureFlag: BooleanNumber, secondaryLangFlag: BooleanNumber, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
   * Undoes any unsaved changes in the current row made by fieldUpdate. 
   * 
   * This includes changes made by Priority triggers. Updated data is returned via UpdateFormCallback.
   * @param {SuccessCallback} [onSuccess] - called on success.
   * @param {ErrorCallback} [onError] - called on error.
   * @returns {Promise<any>}
   * @memberof Form
   */
	undo(onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
	* Deletes the current row. Updated data is returned via UpdateFormCallback.
 
	 When a row is deleted, the server returns a collection of rows with updated index numbers.
 
	 Each row that was after the deleted row gets an index number prior to what it had before the delete.
 
	 Thats way the order of the rows is kept.
 
	 In this method the server returns the index of the last row. Used to update the view with the changes.
   * @param {RowCallback} [onSuccess] - called on success.
   * @param {ErrorCallback} [onError] - called on error.
   * @returns {Promise<RowIndex>}
   * @memberof Form
   */
	delRow(onSuccess?: RowCallback, onError?: ErrorCallback): Promise<RowIndex>
	/**
	 * Opens a choose/search operation for a specified field. 
	 * 
	 * A successful Choose function results in a Search object that can contain either ‘ChooseLine’ values or ‘SearchLine’ values. 
	 * 
	 * The type of values in the object is not predefined for each field, but is rather dependent on the number of results. 
	 * 
	 * ‘ChooseLine’ is only shown when there is a small number of results (no more than a single page of results). 
	 * 
	 * If there are more results than can be displayed in a single page, it is replaced by ‘SearchLine’. 
	 * 
	 * Therefore, after a successful Choose, make sure your code can address both types of results.

       Note: If the field currently contains a value, it will automatically be filled in as fieldValue, even if a different fieldValue was specified.    
	 
	 * @param {string} fieldName - The field’s name (for example CUSTNAME).
	 * @param {string} fieldVale - Current value in the field.
	 * @param {SearchCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.    
	 * @returns {Promise<Search>}
	 * @memberof Form
	 */
    choose(fieldName: string, fieldValue: string, onSuccess?: SearchCallback, onError?: ErrorCallback): Promise<Search>
    	/**
	 * Opens a choose/search operation for a specified field. 
	 * 
	 * A successful Choose function results in a Search object that can contain either ‘ChooseLine’ values or ‘SearchLine’ values. 
	 * 
	 * The type of values in the object is not predefined for each field, but is rather dependent on the number of results. 
	 * 
	 * ‘ChooseLine’ is only shown when there is a small number of results (no more than a single page of results). 
	 * 
	 * If there are more results than can be displayed in a single page, it is replaced by ‘SearchLine’. 
	 * 
	 * Therefore, after a successful Choose, make sure your code can address both types of results.

       Note: If the field currently contains a value, it will automatically be filled in as fieldValue, even if a different fieldValue was specified.    
	 
	 * @param {string} fieldName - The field’s name (for example CUSTNAME).
	 * @param {string} fieldVale - Current value in the field.
     * @param {ChooseModes} mode - full - all results or normal - linked results choose mode
	 * @param {SearchCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.    
	 * @returns {Promise<Search>}
	 * @memberof Form
	 */
	chooseEx(fieldName: string, fieldValue: string, mode: number, onSuccess?: SearchCallback, onError?: ErrorCallback): Promise<Search>
	/**
	 * Certain forms in Priority are subject to Business Process Management (BPM) restrictions. 
	 * 
	 * This means that users are restricted in the values they can see when running a ‘choose’ on a Status or Assigned To column. 
	 * 
	 * This can be an issue when users want to search for documents according to these values. 
	 * 
	 * This function circumvents this limitation and displays all available values. 
	 * 
	 * Use it when constructing a filter through user input.

     * In all other respects, this function is completely identical to choose.

	 * @param {string} fieldName - The field’s name (for example CUSTNAME).
	 * @param {string} fieldVale - Current value in the field.
	 * @param {SearchCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.   
	 * @returns {Promise<Search>}
	 * @memberof Form 
	 */
	filterChoose(fieldName: string, fieldValue: string, onSuccess?: SearchCallback, onError?: ErrorCallback): Promise<Search>
	/**
	 * Performs one of the following actions on the previously opened search field:

       Next(1) - Retrieve more search results.

       Prev(2) - Retrieves the previous search results. Usually, this action is unnecessary, as previously retrieved results are cached locally.

       TypeChange(3) - Change the ‘search-by’ method. Available methods are: By Name, By Number, By Foreign Name.

      TextChange(4) - Changes the search query text.

      StartChange(5) - Specifies that the search should look for results that start with the query text.

      IgnoreCaseChanged(6) - When running a search in English (or other languages with uppercase and lowercase), toggles the ‘ignoreCase’ flag on or off.

	 * @param {SearchAction} action - One of the above actions.
	 * @param {string} searchText - The text to search for.
	 * @param {SearchCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<Search>}
	 * @memberof Form
	 */
	searchAction(action: SearchAction, searchText: string, onSuccess?: SearchCallback, onError?: ErrorCallback): Promise<Search>
	/**
	 * Certain forms in Priority are subject to Business Process Management (BPM) restrictions. 
	 * 
	 * This means that users are restricted in the values they can see when running a ‘searchAction’ on a Status or Assigned To column. 
	 * 
	 * This can be an issue when users want to search for documents according to these values. 
	 * 
	 * This function circumvents this limitation and displays all available values. 
	 * 
	 * Use it when constructing a filter through user input.

	   In all other respects, this function is completely identical to searchAction.
	   
	 * @param {SearchAction} action 
	 * @param {string} searchText - The text to search for.
	 * @param {SearchCallback} [onSuccess] - called on success.
	 * @param {ErrorCallback} [onError] - called on error.
	 * @returns {Promise<Search>}
	 * @memberof Form
	 */
	filterSearchAction(action: SearchAction, searchText: string, onSuccess?: SearchCallback, onError?: ErrorCallback): Promise<Search>
	/**
	* Starts a Direct activation. A Direct Activation is a Procedure;
	* 
	* @param {string} ename - Name of procedure/report.
    * @param {string} type - Specify : “R” for reports, “P” for procedures
    * @param {ProcProgressCallback	} progressCallback - Called in case the ‘activitation’ in question takes some time to complete. Indicates a progress bar should be shown.
	* @param {ProcSuccessCallback} [onSuccess] - Optional. Called on success.
	* @param {ProcErrorCallback} [onError] - Optional. Called on error.
	* @returns {Promise<ProcData>}
	* @memberof Form
	*/
	activateStart(ename: string, type: string, progressCallback: ProcProgressCallback, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
	/**
    *Call this after a direct activation has finished to refresh the current form’s data.
	* @param {SuccessCallback} [onSuccess] - Optional. Called on success.
	* @param {ErrorCallback} [onError] - Optional. Called on error.
	* @returns {Promise<any>}
	* @memberof Form
	*/
	activateEnd(onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>
	/**
	 *Translates a relative path of a file on the server to its full path. For example: ‘../../system/mail/201611/enxjf/1.pdf’ ==> ‘https://servername/primail/201611/enxjf/1.pdf’
	 *
	 * @param {string} filename
	 * @param {GetFileSuccessCallback} [onSuccess]
	 * @param {ErrorCallback} [onError]
	 * @returns {Promise<string>}
	 * @memberof Form
	 */
	getFileUrl(filename: string, onSuccess?: GetFileSuccessCallback, onError?: ErrorCallback): Promise<string>
	/**
	 *Uploads a file to the server from a Blob or File object. Can be used both in a parent form and in a sub-form in file fields.

      Note: This function only uploads the file to the server. Use fieldUpdate to attach it to an attachment field in a particular row.
	 *
	 * @param {object} file - 	A File Object (This object can be obtained from a <input type="file"> HTML tag in the view).
	 * @param {FileUploadProgressCallback} [onProgress] - If a file is large and uploaded in chunks, called periodically to update progress.
	 * @param {FileUploadSuccessCallback} [onSuccess] - Called on successful completion of upload.
	 * @param {ErrorCallback} [onError] - Optional. Called on error.
	 * @returns {Promise<FileResult>}
	 * @memberof Form
	 */
	uploadFile(file: object, onProgress?: FileUploadProgressCallback, onSuccess?: FileUploadSuccessCallback, onError?: ErrorCallback): Promise<FileResult>
	/**
	 * Uploads a file to the server in dataURI format. Can be used both in a parent form and in a sub-form in files fields. Any file type in base64 format is supported, although some file types may be blocked by Priority.

       Note: This function only uploads the file to the server. Use fieldUpdate to attach it to an attachment field in a particular row.
	 *
	 * @param {string} dataUrl -The file data you want to upload in a dataURI format.
	 * @param {string} type - The file type (e.g., .png, .pdf).
	 * @param {FileUploadProgressCallback} [onProgress] - If a file is large and uploaded in chunks, called periodically to update progress.
	 * @param {FileUploadSuccessCallback} [onSuccess] - Called on success .
	 * @param {ErrorCallback} [onError] - Optional. Called on error.
	 * @returns {Promise<FileResult>}
	 * @memberof Form
	 */
	uploadDataUrl(dataUrl: string, type: string, onProgress?: FileUploadProgressCallback, onSuccess?: FileUploadSuccessCallback, onError?: ErrorCallback): Promise<FileResult>
	/**
	 *Cancels the current upload action. Once cancelled, the onSuccess callback of the ‘UploadFile’ request is called.
	 * @memberof Form
	 */
	cancelFileUpload():void
	/**
	 * Returns true if the given function is supported, false otherwise.
	 *
	 * @param {string} funcName - function name
	 * @returns {boolean}
	 * @memberof Form
	 */
    isSupported(funcName:string):boolean
    
    /**
	 * saves the passed query filter to the form
	 *
	 * @param {number} query - query number
     * @param {Filter} filter - filter
     * @param {string} queryName - query name
     * @param {boolean} isDefault - set to the default query filter
	 * @returns {Promise<any>}
	 * @memberof Form
	 */
    saveFilter(query: number, filter: Filter, queryName: string, isDefault: boolean, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>

    /**
	 * deletes a saved query filter from the form according to the passed query number
	 *
	 * @param {number} query - query number
	 * @returns {Promise<any>}
	 * @memberof Form
	 */
    deleteFilter(query: number, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<any>

    /**
     * Get an html string of the signature for the current user
     * @param {number} lang2 - 0/1 current language or secondary langage 
     * @param onSuccess 
     * @param onError 
     * @returns {HtmlSignature} 
     *  html: the html 
     *  string top:0/1 whether or not the signature should be at the top or bottom of the rich text area 
     */
    getHTMLSignature(lang2: number, onSuccess?: SuccessCallback, onError?: ErrorCallback): Promise<HtmlSignature>

    /**
	 * get form searches 
	 *
	 * @returns {Promise<QueryFilter[]>}
	 * @memberof Form
	 */
    getFilters(onSuccess?: getFiltersSuccessCallback, onError?: ErrorCallback): Promise<QueryFilter[]>
}

//////////////// LOGIN FUNCTIONS ///////////////////

export interface APIVersion {
  version: string;
}

export interface Companies {
  Company: Array<Company>;
}
export interface Message {
  entMessages: Array<entMessages>;
}
export interface Languages {
  language: Array<Language>;
}

export type entMessages = {
  num: number;
  message: string;
};
export type Language = {
  lang: Number;
  langtitle: string;
};

export type User = {
    user: string,
    username: string
}

/**Version number of the Web SDK API on the server. */
export type APIVersionSuccessCallback = (APIVersion: APIVersion) => void;
/**Contains a listing of available companies. */
export type CompaniesSuccessCallback = (companies: Companies) => void;
/**Results in an object with properties that describe various system constants currently in effect*/
export type ConstantsSuccessCallback = (object) => void;

export type PriVersionSuccessCallback = (version: string) => void;
export type MessageSuccessCallback = (message: Message) => void;

export type LanguagesSuccessCallback = (languages: Languages) => void;

export type VersionSuccessCallback = (priorityVersion: string) => void;

export interface LoginFunctions {
  /**
   * Used for retrieving companies and groups information.
   * @param {APIVersionSuccessCallback} onSuccess - called on success.
   * @param {ServerResponse} onError - called on error.
   */
  apiVersion(
    onSuccess?: APIVersionSuccessCallback,
    onError?: ServerResponse
  ): Promise<APIVersion>;
  /**
   * Used for retrieving Priority's constants.
   * @param {CompaniesSuccessCallback} onSuccess - called on success.
   * @param {ServerResponse} onError - called on error.
   */
  companies(
    onSuccess?: CompaniesSuccessCallback,
    onError?: ServerResponse
  ): Promise<Companies>;
  /**
   * Used for retrieving Priority's constants.
   * @param {ConstantsSuccessCallback} onSuccess - called on success.
   * @param {ServerResponse} onError - called on error.
   * This method can only be run on the LoginFunctions object, which is returned after a successful login.
   * Results in an object with properties that describe various system constants currently in effect,
   *  e.g. decimalsign which determines the decimal sign.
   */
  constants(
    onSuccess?: ConstantsSuccessCallback,
    onError?: ServerResponse
  ): Promise<any>;
  /**
   * Used for retrieving messages of a certain entity in Priority.
   * @param {string} ename - Name of entity.
   * @param {string} type - Type of entity
   * @param {number} form - Starting range messages
   * @param {number} to - Ending Number of message
   * @param {MessageSuccessCallback} onSuccess - called on success.
   * @param {ServerResponse} onError - called on error.
   */
  entMessages(
    ename,
    type,
    form,
    to,
    onSuccess?: MessageSuccessCallback,
    onError?: ServerResponse
  ): Promise<Message>;

  isUserConsent(): number;
  languages(
    onSuccess?: LanguagesSuccessCallback,
    onError?: ServerResponse
  ): Promise<Languages>;

  marketgateUrl: string;

  priorityVersion(
    onSuccess?: VersionSuccessCallback,
    onError?: ServerResponse
  ): Promise<string>;

  user(): User;
}

//////////////// PROC ///////////////////

export const enum ProcStepType {
    /** A procedure step that includes input fields.*/
    InputFields = "inputFields",
    /** A procedure step that includes choose/search fields. */
    InputOptions = "inputOptions",
    /** A procedure step that shows a help dialog. */
    InputHelp = "inputHelp",
    /** A procedure step for when the procedure sends a message. */
    Message = "message",
        /** A procedure step that includes upload file. */
    Upload="upload",
    /** A procedure step for handling a new report options. */
    ReportOptions = "reportOptions",
    /** A procedure step for handling a new document options. */
    DocumentOptions = "documentOptions",
    /** A procedure step for handling a report display as a html file. */
    DisplayUrl = "displayUrl",
    /** Indicates the procedure has finished. */
    End = "end",
    Client = "client"
}

export interface ProcBaseData {
    /** The current procedure’s object. */
    proc: Proc,
    /** Describes the data type. One of ProcStepType enum. */
    type: ProcStepType
}

/**
 * This data type describes a dialog where the user has to fill in one or more fields in order for the procedure to run.
 * It is the most common procedure data type.
 */
export interface InputFields {
    /** Contains the input fields for the procedure. */
    EditFields: EditField[],
    /** Contains information about the possible operators. */
    Operators: Operator[],
    /** Contains help text for the input dialog. */
    text: string,
    /** The title of the input dialog. */
    title: string
}

export interface EditField {
    /** Field's internal type (ColumnCode enum). */
    code: ColumnCode,
    /** Describes the type of variable in code (ColumnType enum).
    TODO: check for documentation if checkbox is valid. */
    type: ColumnType,
    /** In date fields, the field’s format, e.g. ‘DD/MM/YY’. */
    format: string,
    /** Field ID. */
    field: number,
    /** Contains the help text for the specific input field. */
    helpstring: string,
    /** Indicates if the field is a password. */
    ispassword: BooleanNumber,
    /** Indicates if the field is mandatory and must be filled. 0 or 1.
    TODO: change type in documentation. */
    mandatory: BooleanNumber,
    /** Indicates if the field is read-only, i.e. it must use values from a choose list. 0 or 1. 
    TODO: change type in documentation. */
    readonly: BooleanNumber,
    /** Indicates if the field operator is readonly */
    readonlyoperator: BooleanNumber,
    /** Default operator Id (saved from the previous run). */
    operator: number,
    /** The field’s title. */
    title: string,
    /** Default value (saved from the previous run). */
    value: string,
    /** Default second value (if operator is “between”). */
    value1: string,
    /** Field’s maximum length. */
    maxlength: number,
    /**  Various field attributes (ColumnZoomType enum). */
    zoom: ColumnZoomType, 
}

export interface InputFieldsReturn {
    /** Input fields to return to server, with the values selected by the user. */
    EditFields: EditFieldReturn[]
}

export interface EditFieldReturn {
    /** field ID. */
    field: number;
    /** operator ID. */
    op: number;
    /** field value. */
    value: string;
    /** second operator ID. */
    op2: number;
    /** field second value. */
    value2: string;
}


export interface Operator {
    /** Operator name. */
    name: string
    /** Operator ID. */
    op: number,    
    /** Operator title. */
    title: string
}

/**
 * This data type describes a dialog where the user has select an option in order for the procedure to run.
 * In Priority’s web interface, these options would show as radio buttons (when more than 8, as a listbox).
 */
export interface InputOptions {
    /** Contains the choice fields for the procedure. */
    Options: Option[]
    /** Contains help text for the dialog. */
    text: string,
    /** The title of the dialog. */
    title: string
}

export interface Option {
    /** Option ID. */
    field: number;
    /** Contains the help text for this field. */
    help: string;
    /** Option name. */
    name: string;
    /** Indicates whether the option has been selected. Only one option can be selected. (from previous runs) */
    selected: BooleanNumber;
    /** Option title. */
    title: string;
}

/**
 * Some procedures include an introductory or intermediate dialog that displays help text. Structure of the data object:
 */
export interface InputHelp {
    /** Contains help text for the dialog. */
    text: string,
    /** The title of the dialog. */
    title: string
}

export interface InputProcData {
    input: InputFields | InputOptions | InputHelp
}

export const enum ProcMessageType {
    Information = 'information',
    Warning = 'warning',
    Error = 'error'
}

/**
 * An error/warning/informational message provided by the procedure.
 */
export interface MessageProcData {
    /** Message text. */
    message: string,
    /** The message type, one of ProcMessageType enum. */
    messagetype: ProcMessageType
}

/**
 * When launching a report that has multiple formats defined, allows you to choose the desired format. 
 */
export interface ReportOptions {
    /** Array of available display/print formats. */
    formats: Format[]
}

export interface Format {
    /** Format ID. */
    format: number,
    /** Indicates whether the format is selected. */
    selected: BooleanNumber,
    /** The format title. */
    title: string,
    /** Template Id - for word templates */
    template: number
}

export interface documentFormat{
    /** html of pdf format  */
    pdf:BooleanNumber;
    /**html or world templet */
    word:BooleanNumber;
    /**add a signature to the file (only work in pdf and word format) */
    signature:BooleanNumber
}

/**
 * When launching a document that has multiple display/print formats defined, allows you to choose the desired format. 
 */
export interface DocumentOptions {
    /** Array of available display/print formats. */
    formats: Format[],
    /** If true, the procedure will produce a PDF file of the document. If false, it produces a HTML document. */
    pdf: boolean,
}

/**
 * After generating a report, this data type displays the url on the server of the report.
 */
export interface DisplayUrl {
    /** The display url of the report. */
    Urls: { url: string }
}

export type ProcData = ProcBaseData & (InputProcData | MessageProcData | ReportOptions | DocumentOptions | DisplayUrl)

export type ProcSuccessCallback = (
    procData: ProcData
    ) => void

/**
 * This object displays all the fields in the current procedure,
 * of which some may affect the current search operation.
 * For example, if you filled in a customer, and are currently choosing a price quote, 
 * it might limit the search operation only to price quotes opened for that customer.
 */
export interface ChooseFields {
    ChooseFields: ChooseField[]
}

export interface ChooseModes {
    normal: number,
    full: number
}

export interface ChooseField {
    /** field ID (from EditField) */
    field: number,
    /** field value */
    value: any
}

/**
 * Use this function to update a progress bar. This function is called by the SDK whenever a progress bar is called on the server by the procedure itself.
 * Note that as long as a progress bar was not called by the procedure on the server, this function WOULD NOT be called, even if the procedure is taking a long time (e.g., due to a long-running query).
 * Therefore, you should always use some sort of action indicator. Change it to a percentage indicator when this callback is called.
 * @param {Proc} proc - Procedure Object.
 * @param {number} number - Progress value 0-100.
 */
export type ProcProgressCallback = (
    proc: Proc,
    number: number
    ) => void

export const enum ProcErrorType {
    NotSupported = 'NotSupported',
    ServerBusy = 'ServerBusy',
    Error = 'Error'
}

export interface ProcError {
    /** Procedure Object. */
    proc: Proc,
    /** The error type. One of ProcErrorType enum. */
    type: ProcErrorType,
    /** Error text */
    message: string
}

export type ProcErrorCallback = (
    procError: ProcError
    ) => void

export interface Proc {
    /** The procedure’s descriptive title. */
    title:string;
    /** The procedure’s unique uppercase ‘Priority’ name. */
    name:string;
    /** the server session ID */
    session:string;
    /**
     * Call after a message is approved or canceled.
     * @param {BooleanNumber} ok - 1: OK, 0: Cancel (If only one button can send either).
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    message(ok: BooleanNumber, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Call after reportOptions step
     * @param {BooleanNumber} ok - 1: OK, 0: Cancel.
     * @param {number} selectedFormat - selected format.
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    reportOptions(ok: BooleanNumber, selectedFormat: number, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Call after documentOptions step
     * @param {BooleanNumber} ok - 1: OK, 0: Cancel.
     * @param {number} selectedFormat - selected format.
     * @param {number|documentFormat} pdf - Indicate whether to produce a PDF or HTML document - 1: PDF, 2: HTML.
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    documentOptions(ok: BooleanNumber, selectedFormat: number, pdf: number|documentFormat, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Call after inputFields step
     * @param {BooleanNumber} ok - 1: OK, 0: Cancel.
     * @param {InputFieldsReturn} inputFieldsReturn - Input fields data
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    inputFields(ok: BooleanNumber, inputFieldsReturn: InputFieldsReturn, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Call after inputOptions step
     * @param {BooleanNumber} ok - 1: OK, 0: Cancel.
     * @param {number} selection - selected option ID.
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    inputOptions(ok: BooleanNumber, selection: number, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Call after inputHelp step
     * @param {BooleanNumber} ok - 1: OK, 0: Cancel.
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     * @instance
     */
    inputHelp(ok: BooleanNumber, onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Call after every other step
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    continueProc(onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Cancel procedure.
     * @param {ProcSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
     cancel(onSuccess?: ProcSuccessCallback, onError?: ProcErrorCallback): Promise<ProcData>
    /**
     * Open Choose or Search for an input field.
     * @param {number} fieldId - ID of field (in EditField)
     * @param {string} value - current value in field.
     * @param {ChooseFields} data - Data in all fields (Choose/Search may be dependent on other fields values).
     * @param {ProcSearchCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    choose(fieldId: number, value: string, data: ChooseFields, onSuccess?: SearchCallback, onError?: ProcErrorCallback): Promise<Search>
    /**
     * Perform action in search dialog.
     * @param {number} fieldId - ID of field.
     * @param {string} value - current value in field.
     * @param {SearchAction} action - One of SearchAction enum.
     * @param {ChooseFields} data - Data in all fields (Search may be dependent on other fields values).
     * @param {ProcSearchCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    searchAction(fieldId: number, value: string, action: SearchAction, data: ChooseFields, onSuccess?: SearchCallback, onError?: ProcErrorCallback): Promise<Search>
    /**
     * Uploads a file to the server from a Blob or File object
     * @param {File} file - A File Object (This object can be obtained from a <input type="file"> HTML tag in the view).
     * @param {FileUploadProgressCallback} onProgress - If a file is large and uploaded in chunks, called periodically to update progress.
     * @param {FileUploadSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    uploadFile(file: File, onProgress: FileUploadProgressCallback, onSuccess?: FileUploadSuccessCallback, onError?: ProcErrorCallback): Promise<FileResult>
    /**
     * Uploads a file to the server from a Blob or File object
     * @param {string} dataUrl - The file data you want to upload in a dataURI format.
     * @param {stirng} type - The file type (e.g., .png, .pdf).
     * @param {FileUploadProgressCallback} onProgress - If a file is large and uploaded in chunks, called periodically to update progress.
     * @param {FileUploadSuccessCallback} onSuccess - called on success.
     * @param {ProcErrorCallback} onError - called on error.
     */
    uploadDataUrl(dataUrl: string, type: string, onProgress?: FileUploadProgressCallback, onSuccess?: FileUploadSuccessCallback, onError?: ProcErrorCallback): Promise<FileResult>
    /** Cancels the current upload action. */
    cancelFileUpload()
    /**
     * Returns true if the given function is supported, false otherwise.
     *
     * @param {string} funcName - function name
     * @returns {boolean}
     * @memberof Form
     */
    isSupported(funcName:string):boolean
}

export type ProcType = 'P' | 'R'

export function procStart(procName: string,
                          type: ProcType,
                          onProgress: ProcProgressCallback,
                          profile: ProfileConfig | string, 
                          onSuccess?: ProcSuccessCallback,
                          onError?: ProcErrorCallback): Promise<ProcData>

//////////////// SEARCH ///////////////////

export interface SearchResult {
    /**
     * The result’s unique identifier value. For example, if in Search,
     * title1 is ‘Customer Number’, this might be ‘CUST001’
     */
    string1: string;
    /**
     * The result’s description value. For example, if in Search,
     * title2 is ‘Customer Name’, this might be ‘Blue Construction Inc.’
     */
    string2: string;
    /**
     * The actual value returned to the field being updated. This is usually either ‘string1’ or ‘string2’.
     */
    retval: string;
}

export type SearchCallback = (result: Search) => void;

/**
 * The Search object can contain either ‘ChooseLine’ values or ‘SearchLine’ values.
 * The type of values in the object is not predefined for each field,
 * but is rather dependent on the number of results - if the number is large, ‘ChooseLine’ is replaced by ‘SearchLine’.
 * Therefore, after a successful Choose, make sure your code can address both types of results.
 */
export interface Search {
    /** An object containing a list of search results - key is the index number and value is a SearchResult. */
    SearchLine: { [key: string]: SearchResult };
    /** An object containing a list of search results - key is the index number and value is a SearchResult. */
    ChooseLine: { [key: string]: SearchResult };
    /**
     * Each search result is described by two titles - a unique identifier value and a description.
     * This is the title of the unique identifier value, e.g. ‘Customer Number’. Only displayed in a Choose list.
     */
    title1: string;
    /**
     * Each search result is described by two titles - a unique value and a description.
     * This is the title of the description, e.g. ‘Customer Name’. Only displayed in a Choose list.
     */
    title2: string;

    /******************** For Search only ********************/

    /**
     * The currently active ‘search-by’ method. See searchAction
     * @memberof Search
     */
    cursor: string;
    /**
     * If 1, indicates that the ignore case flag was active for this search. Else, the flag is off
     * @memberof Search
     */
    ignorecase: BooleanNumber;
    /**
     * If 1, indicates that the current search field allows for multiple values to be selected.
     * If 0, only one value can be chosen.
     */
    ismulti:BooleanNumber;
    /**
     * The number of search results retrieved in the current Search object.
     * @memberof Search
     */
    lines: number;
    /**
     * Indicates whether there are more search results that were not returned. 
     * If 1 - a search action needs to be executed in order to get all results. Else - there are no more results.
     * @type {BooleanNumber}
     * @memberof Search
     */
    next: BooleanNumber;
    /**
     * If 1, indicates that the ‘match start’ flag was active for this search. Else, the flag is off. See searchAction
     * @memberof Search
     */
    start:BooleanNumber;
    /**
     * The search pattern used to retrieve these results.
     * @memberof Search
     */
    value: string;
    /**
     * The Column name
     * @memberof Search
     */
    colName: string;
}

export enum SearchAction {
    Start = 0,
    /** Retrieve more search results. */
    Next = 1,
    /** Retrieves the previous search results. Usually, this action is unnecessary, as previously retrieved results are cached locally. */
    Prev = 2,
    /** Change the ‘search-by’ method. Available methods are: By Name, By Number, By Foreign Name. */
    TypeChange = 3,
    /** Changes the search query text. */
    TextChange = 4,
    /** Specifies that the search should look for results that start with the query text. */
    StartChange = 5,
    /** When running a search in English (or other languages with uppercase and lowercase), toggles the ‘ignoreCase’ flag on or off. */
    IgnoreCaseChanged = 6
}


//////////////// SERVER RESPONSE ///////////////////

export  enum ServerResponseType {
    /** Indicating there was an error message from Priority. */
    Error = "error",
    /** Indicating there was a warning message from Priority. */
    Warning = "warning",
    /** Indicating there was an information message from Priority. */
    Information = "information",
    /** Indicating there was a fatal error somewhere. Could be a syntax error,API error,exception and so on. */
    APIError = "apiError"
}

export  enum ServerResponseCode {
    /** There was an attempt to add text in a no-text form. */
    NoHtml = "noHtml",
    /** There was an attempt to save text in a read-only form. */
    ReadOnlyForm = "readOnlyForm",
    /** There was an attempt to save a text that was too long. */
    TextTooLong = "textTooLong",
    /** There was an attempt to perform an action in some forms row before saving/discarding changed in the current row. */
    MustSaveOrDiscard = "mustSaveOrDiscard",
    /** There was an API exception */
    Exception = "exception",
    /** There was an attempt to call 'clearRows' on a subform. */
    NoClearOnSubForm = "noClearOnSubForm",
    /** The file sent to the upload function was null. */
    FileIsNull = "fileIsNull",
    /** There was an attempt to perform an action on  a not-existing subform. */
    NoSuchSubForm = "noSuchSubForm",
    /** There was an attempt to perform an action on  a not-existing column. */
    NoSuchColumn = "noSuchColumn",
    /** The previous API request was deleted from the request-queue, meaning it was rejected. */
    FailedPreviousRequest = "failedPreviousRequest",
    /** The user canceled a warning message that came from Priority. */
    WarningCancel = "warningCancel",
    /** Login failed. */
    LoginFailed = "loginFailed",
    /** The filter for rows retrieval is wrong. */
    InvalidFilter = "invalidFilter",
    /** Text forms - the text is already being edited somewhere else. */
    ReadWrite = "readWrite",
    /** The current API request was stopped.  */
    Stop = "stop",
    /** Message code */
    Information = "information",
    /** Code for calling a function that is not supported in the Priority version  */
    NotSupport = "notSupportedInThisPriorityVersion",
    /**  Code for logging in with an expired password   */
    LoginExpired = "loginExpired"
}

export interface ServerResponse {
	/** The form object related to the erroneousness action */
    form: Form;
    /** Error or warning message text */
    message: string;
    /** Indicates whether the response is a fatal error or not. */
    fatal: boolean;
    /** Gives more information about the message type. one of 'ServerResponseType'. */
    type: ServerResponseType;
    /** Gives more information about the message type. one of 'ServerResponseCode'. */
    code: ServerResponseCode;
}
